install.packages("tidyverse")
head(iris)
tibble(iris)
install.packages("tidyverse")
library("tidyr")
install.packages("tidyverse")
tidyverse_update()
library("diplyr")
install.packages("tidyverse")
library(tibble)
?tibble
tibble(iris)
iris1 <- as_tibble(iris)
iris1
library(dplyr)
mutate(iris1, area = Sepal.Length * Sepal.Width)
iris1 <- mutate(iris1, area = Sepal.Length * Sepal.Width)
iris1
big <- filter(iris1, area>18)
big
big <- arrange(big, area)
big
big <- arrange(big, desc(area))
big
biggroup <-group_by(iris1,Species) %<% mean(area)
biggroup <-group_by(iris1,Species)
biggroup
library(magrittr)
biggroup <-group_by(iris1,Species) %<% mean(area)
summarise(biggroup)
summarise(biggroup,mean(area))
summarise(biggroup,mean(sd))
mean(iris1$area)
summarise(iris1)
summarise(iris1)
summarise(iris1, avg = mean(area))
summarise(biggroup,mean(area))
rename(iris1, area = sepal.area)
rename(iris1, sepal.area = area)
iris1 <- mutate(iris1, petal.area = Petal.Length * Petal.Width)
iris1
iris1 <- mutate(iris1, ratio = area/petal.area)
iris1
iris1 <- rename(iris1, sepal.area = area)
iris1
gp <- group_by(iris1, Species) %<% summarise(mean(ratio))
gp <- group_by(iris1, Species) %>% summarise(mean(ratio))
gp
filter(iris1, species == "setosa") %>% mean(ratio)
filter(iris1, Species == "setosa") %>% mean(ratio)
filter(iris1, Species == "setosa") %>% summarise(mean(ratio))
set <- filter(iris1, Species == "setosa") %>% mean(ratio)
set <- filter(iris1, Species == "setosa")
View(set)
View(iris1)
plot(gp)
gp1 <- group_by(iris1, Species)
plot(gp1)
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
library(caret)
library(dplyr)
data <- iris
#Creating Testing/Training sets (in Caret)
set.seed(111)
trainIndex <- createDataPartition(data$dependent.variable, p = 0.7, list = FALSE)
training <- data[ trainIndex,]
testing  <- data[-trainIndex,]
library(caret)
library(dplyr)
data <- iris
#Creating Testing/Training sets (in Caret)
set.seed(111)
trainIndex <- createDataPartition(data$dependent.variable, p = 0.7, list = FALSE)
trainIndex <- createDataPartition(data$Species, p = 0.7, list = FALSE)
training <- data[ trainIndex,]
testing  <- data[-trainIndex,]
#Cross Validation 10 fold
fitControl<- trainControl(method = "cv", number = 10, savePredictions = TRUE)
runModel <- <- function(x,y,z){
model <- train((x) ~ ., data = training, method = (y), trControl = fitControl)
predictions <- predict(model, testing)
testing$predictions <- predictions
(z) <- model
}
(z) <- model
runModel <- <- function(x,y,z){
(z) <- train((x) ~ ., data = training, method = (y), trControl = fitControl)
}
runModel <- function(x,y,z){
(z) <- train((x) ~ ., data = training, method = (y), trControl = fitControl)
}
runModel(Species, "gbm", model.GBM)
runModel <- function(x,y,z){
(z) <- train(x ~ ., data = training, method = (y), trControl = fitControl)
}
runModel(Species, "gbm", model.GBM)
data
library(dplyr)
library(caret)
runModel <- function(x,y,z){
(z) <- train((x) ~ ., data = training, method = (y), trControl = fitControl)
}
data <- iris
#Creating Testing/Training sets (in Caret)
set.seed(111)
trainIndex <- createDataPartition(data$dependent.variable, p = 0.7, list = FALSE)
trainIndex <- createDataPartition(data$Species, p = 0.7, list = FALSE)
training <- data[ trainIndex,]
testing  <- data[-trainIndex,]
#Cross Validation 10 fold
fitControl<- trainControl(method = "cv", number = 10, savePredictions = TRUE, allowParallel = TRUE)
runModel <- function(x,y,z){
(z) <- train((x) ~ ., data = training, method = (y), trControl = fitControl)
}
runModel(Species, "gbm", model.GBM)
(z) <- train(x ~ ., data = training, method = (y), trControl = fitControl)
runModel(training$Species, "gbm", model.GBM)
runModel(Species, "gbm", model.GBM)
runModel("Species", "gbm", model.GBM)
runModel <- function(y,z){
(z) <- train(data = training, Species ~ ., method = (y), trControl = fitControl)
}
runModel("gbm", model.GBM)
boxplot(iris)
test <- boxplot(iris)
attributes(test)
test$out
#load data
load("output/modData.RDS")
setwd("C:/Users/rhysh/Google Drive/Data Science/Template Project/scripts")
